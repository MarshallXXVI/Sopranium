using KnightsOfLaCampus.Source;
using KnightsOfLaCampus.Source.GridNew;
using KnightsOfLaCampus.Units;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;

namespace KnightsOfLaCampus.Managers.MovementManagement
{
    /// <summary>
    /// The Logic how the Ally Units move. Allies follow a path, that is generated by the user
    /// </summary>
    internal sealed class AllyMover : UnitMover
    {
        #region Declaration

        // The Start of the Path
        private Vector2 mStart;

        // The Destination of the Path
        private Vector2 mEnd;

        #endregion
        public AllyMover(Grid grid, Unit unit) : base(grid, unit)
        {
            #region Init

            // Moves the current unit into the center of the spawened GridBox
            // currentGridPosition is the actual possition in the grid
            mStart = mGrid.PixelToGridPosition(mUnit.mPosition);
            mEnd = mStart;

            // Sets the Unit position the position of the grid box
            mUnit.mPosition = mGrid.GridToPixelPosition(mStart);

            // Init the Path and direction
            mUnit.mPath = mGrid.GetShortestPath(mStart, mStart);
            mUnit.mDirection = Vector2.Zero;

            // Sets the first node
            if (mUnit.mPath.Count != 0)
            {
                mNext = mUnit.mPath.Pop().Position;
            }

            #endregion
        }

        /// <summary>
        /// Moves the Unit along a A Star path
        /// </summary>
        private void MoveUnitWithPlayerInput()
        {
            // #BUG Weird glitches for speed > 2

            #region Implementation

            // of the Mouse is clicked change the destination for the path
            if (Globals.Mouse.RightClick() && mUnit.mMoveableByPlayer)
            {
                // The destination in pixel coordinates
                var endPixels = new Vector2(Mouse.GetState().Position.X, Mouse.GetState().Position.Y);

                // Reads the actual grid position for pathfinding
                mStart = mGrid.PixelToGridPosition(mUnit.mPosition);
                mEnd = mGrid.PixelToGridPosition(endPixels);

                // Updates the Path
                mUnit.mPath = mGrid.GetShortestPath(mStart, mEnd);
            }

            MoveUnitAlongPath();

            #endregion
        }

        public override void Update(GameTime gameTime)
        {
            // Movement behaviour of the Unit
            MoveUnitWithPlayerInput();

            // Updates the Unit to save the position 
            mUnit.Update(gameTime);
        }

        /// <summary>
        /// Draws the animation step
        /// </summary>
        public override void Draw()
        {
            DebugDrawPath(false);
            mUnit.Draw(Globals.SpriteBatch);
        }

        /// <summary>
        /// Only for debugging
        /// </summary>
        /// <param name="set"></param>
        private void DebugDrawPath(bool set)
        {
            #region Implementation

            if (set)
            {
                foreach (var node in mUnit.mPath)
                {
                    mGrid.SetBoxTextureAt(node.Position, Globals.Content.Load<Texture2D>(@"2D\Black"));
                }
            }

            #endregion
        }
    }

}
